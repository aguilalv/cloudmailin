name: Deploy to Staging

on:
  push:
    branches:
      - staging

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      REGION: us-central1
#      DOMAIN: cm-staging.aalhub.uk
      SERVICE: cloudmailin-staging
      BASE_URL: ${{ secrets.STAGING_BASE_URL }}

    steps:
      # 1. Checkout Code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCLOUD_SERVICE_ACCOUNT_KEY }}

      # 3. Set up Google Cloud CLI
      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: '427.0.0'
          project_id: ${{ secrets.GCLOUD_PROJECT_ID }}

      # 4. Install gcloud beta components
      - name: Install gcloud beta components
        run: |
          gcloud components install beta --quiet

      # 5. Authenticate Docker with Google Artifact Registry
      - name: Authenticate Docker with GAR
        run: gcloud auth configure-docker $REGION-docker.pkg.dev --quiet

      # 6. Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          DEPLOYED_AT=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          IMAGE_NAME=$REGION-docker.pkg.dev/${{ secrets.GCLOUD_PROJECT_ID }}/cloudmailin-staging/cloudmailin-staging:${{ github.sha }}
          docker build --build-arg APP_VERSION=${{ github.sha }} --build-arg DEPLOYED_AT=$DEPLOYED_AT -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      # 7. Wait before deploying
      - name: Wait before deploying
        run: sleep 10

      # 8. Deploy to Google Cloud Run
      - name: Deploy to Google Cloud Run
        run: |
          gcloud run deploy $SERVICE \
            --image=$REGION-docker.pkg.dev/${{ secrets.GCLOUD_PROJECT_ID }}/cloudmailin-staging/cloudmailin-staging:${{ github.sha }} \
            --region=$REGION \
            --platform=managed \
            --allow-unauthenticated \
            --quiet

      # --- Post deployment tests ---

      # A. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.3"

      # B. Install dependencies
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install allure-pytest

      # C. Run functional tests with Allure results
      - name: Write GCP Service Account Key to File
        run: |
          echo "${{ secrets.GCLOUD_SERVICE_ACCOUNT_KEY }}" > /tmp/staging-key.json
          sed -i 's/^"//;s/"$//' /tmp/staging-key.json
          cat /tmp/staging-key.json | jq . # Optional: Validate JSON formatting
        shell: bash

      # C. Run functional tests with Allure results
      - name: Run functional tests
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS="/tmp/staging-key.json"
          FLASK_ENV=FunctionalTestingConfig pytest tests/functional \
                 --base-url=${{ env.BASE_URL }} \
                 --junitxml=reports/functional-tests.xml \
                 --html=reports/functional-tests-report.html \
                 --alluredir=reports/allure-results

      # D. Install Allure CLI
      - name: Install Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
          tar -zxvf allure-2.24.0.tgz
          sudo mv allure-2.24.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure
          allure --version

      # E. Generate Allure Report
      - name: Generate Allure Report
        if: always()
        run: |
          allure generate reports/allure-results -o reports/allure-report --clean


      # 9. Generate GitHub Actions Summary
      - name: üìÑ Add Test Report Summary
        if: always()
        run: |
          echo "## üìä Test Report Summary" >> $GITHUB_STEP_SUMMARY
          
          # Links to Reports
          echo "- üìù **[View Allure Report](https://<username>.github.io/<repo>/reports-output/${{ github.ref_name }}/allure-functional-report/index.html)**" >> $GITHUB_STEP_SUMMARY

      - name: Pull latest gh-pages branch
        if: always()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch origin gh-pages
          git checkout gh-pages
          git pull origin gh-pages

      # 10. Prepare GitHub Pages Reports
      - name: Prepare GitHub Pages Reports
        if: always()
        run: |
          mkdir -p reports-output/${{ github.ref_name }}/allure-functional-report
          cp -r reports/allure-report/* reports-output/${{ github.ref_name }}/allure-functional-report/

      # 10.5 Push new reports to github pages
      - name: Commit and Push to GitHub Pages
        if: always()
        run: |
          git add reports-output/*
          git commit -m "Update GitHub Pages reports [${{ github.sha }}]" || echo "No changes to commit"
          git push origin gh-pages

      # 11. Publish Reports to GitHub Pages
      # - name: üì¢ Publish Reports to GitHub Pages
      #   if: always()
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     publish_dir: ./gh-pages


