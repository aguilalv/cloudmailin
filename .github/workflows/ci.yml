name: CI Pipeline

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.12.8]

    steps:
      # 1. Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Run black formatting check
      - name: Run black
        run: black . --check

      # 5. Run unit tests with coverage and Allure results
      - name: Run unit tests with coverage
        run: |
          pytest --cov=cloudmailin --cov-report=xml:reports/coverage.xml \
                 --cov-report=html:reports/coverage \
                 --junitxml=reports/unit-tests.xml \
                 --alluredir=reports/allure-results \
                 --ignore=tests/functional

      # 6. Run functional tests with Allure results
      - name: Run functional tests
        run: |
          pytest tests/functional \
                 --junitxml=reports/functional-tests.xml \
                 --html=reports/functional-tests-report.html \
                 --alluredir=reports/allure-results

      # 6.5. Install Allure CLI
      - name: Install Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
          tar -zxvf allure-2.24.0.tgz
          sudo mv allure-2.24.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure
          allure --version


      # 7. Generate Allure Report
      - name: Generate Allure Report
        if: always()
        run: |
          allure generate reports/allure-results -o reports/allure-report --clean

      # 8. Check Coverage Thresholds
      - name: Check coverage thresholds
        run: |
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; print(float(ET.parse('reports/coverage.xml').getroot().attrib['line-rate']) * 100)")
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 90.0" | bc -l) )); then
            echo "Test coverage ($COVERAGE%) is below the required threshold (90%)"
            exit 1
          fi

      # 9. Generate GitHub Actions Summary
      - name: üìÑ Add Test Report Summary
        if: always()
        run: |
          echo "## üìä Test Report Summary" >> $GITHUB_STEP_SUMMARY
          
          # Count Unit Tests
          UNIT_TEST_COUNT=$(pytest --collect-only --ignore=tests/functional | grep 'collected' | awk '{print $2}')
          echo "- ‚úÖ **Unit Tests Collected:** $UNIT_TEST_COUNT" >> $GITHUB_STEP_SUMMARY
          
          # Coverage Percentage
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; print(f'{float(ET.parse(\"reports/coverage.xml\").getroot().attrib[\"line-rate\"])*100:.2f}')")
          echo "- üìà **Coverage:** $COVERAGE%" >> $GITHUB_STEP_SUMMARY
          
          # Links to Reports
          echo "- üìù **[View Allure Report](https://<username>.github.io/<repo>/allure-report/index.html)**" >> $GITHUB_STEP_SUMMARY
          echo "- üìù **[View Coverage Report](https://<username>.github.io/<repo>/coverage/index.html)**" >> $GITHUB_STEP_SUMMARY


      # 10. Prepare GitHub Pages Reports
      - name: Prepare GitHub Pages Reports
        if: always()
        run: |
          mkdir -p gh-pages/allure-report
          cp -r reports/allure-report/* gh-pages/allure-report/
          mkdir -p gh-pages/coverage
          cp -r reports/coverage/* gh-pages/coverage/
          echo '<!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>CI/CD Test Reports</title>
          </head>
          <body>
              <h1>CI/CD Test Reports</h1>
              <ul>
                  <li><a href="allure-report/index.html">Allure Test Report</a></li>
                  <li><a href="coverage/index.html">Coverage Report</a></li>
              </ul>
          </body>
          </html>' > gh-pages/index.html

      # 11. Publish Reports to GitHub Pages
      - name: üì¢ Publish Reports to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages

      # 12. Final Status Notification
      - name: üì¨ Notify CI Status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ CI Pipeline completed successfully!"
          else
            echo "‚ùå CI Pipeline encountered errors!"
          fi
