name: CI Pipeline

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.12.8]

    steps:
      # 1. Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black pytest pytest-cov pytest-html

      # 4. Run flake8 linting
      #- name: Run flake8
      #  run: flake8 .

      # 5. Run black formatting check
      - name: Run black
        run: black . --check

      # 6. Run unit tests with coverage
      - name: Run unit tests
        run: pytest --cov=cloudmailin --cov-report=xml:reports/coverage.xml --cov-report=html:reports/coverage --junitxml=reports/unit-tests.xml --html=reports/unit-tests-report.html --ignore=tests/functional

      # 7. Run functional tests
      - name: Run functional tests
        run: pytest tests/functional --junitxml=reports/functional-tests.xml --html=reports/functional-tests-report.html

      # 8. Check coverage thresholds
      - name: Check coverage thresholds
        run: |
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; print(float(ET.parse('reports/coverage.xml').getroot().attrib['line-rate']) * 100)")
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 90.0" | bc -l) )); then
            echo "Test coverage ($COVERAGE%) is below the required threshold (90%)"
            exit 1
          fi

      # 9. Create GitHub Pages Structure
      - name: Prepare GitHub Pages Reports
        if: always()
        run: |
          mkdir -p gh-pages
          cp reports/unit-tests-report.html gh-pages/unit-tests-report.html
          cp reports/functional-tests-report.html gh-pages/functional-tests-report.html
          cp -r reports/coverage gh-pages/coverage
          echo '<!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Test Reports</title>
          </head>
          <body>
              <h1>Test and Coverage Reports</h1>
              <ul>
                  <li><a href="unit-tests-report.html">Unit Test Report</a></li>
                  <li><a href="functional-tests-report.html">Functional Test Report</a></li>
                  <li><a href="coverage/index.html">Coverage Report</a></li>
              </ul>
          </body>
          </html>' > gh-pages/index.html

      # 10. Publish Reports to GitHub Pages
      - name: üì¢ Publish Reports to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages

      # 11. Final Status Notification
      - name: üì¨ Notify CI Status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ CI Pipeline completed successfully!"
          else
            echo "‚ùå CI Pipeline encountered errors!"
          fi


