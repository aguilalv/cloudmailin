name: CI Pipeline

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.12.8]

    steps:
      # 1. Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black pytest pytest-cov pytest-html

      # 4. Run flake8 linting
      #- name: Run flake8
      #  run: flake8 .

      # 5. Run black formatting check
      - name: Run black
        run: black . --check

      # 6. Run unit tests with coverage
      - name: Run unit tests
        run: pytest --cov=cloudmailin --cov-report=xml --cov-report=html:coverage/html --junitxml=test-results/unit-tests.xml --ignore=tests/functional

      # 7. Upload Unit Test Results
      - name: üìä Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: ./test-results/unit-tests.xml

      # 8. Upload Coverage Reports
      - name: üìä Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: ./coverage/html/

      # 9. Run functional tests
      - name: Run functional tests
        run: pytest tests/functional --junitxml=test-results/functional-tests.xml --html=test-results/functional-tests-report.html

      # 10. Upload Functional Test Results
      - name: üìä Upload Functional Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: functional-test-results
          path: ./test-results/functional-tests-report.html

      # 11. Enforce Coverage Thresholds
      - name: Check coverage thresholds
        run: |
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; print(float(ET.parse('coverage.xml').getroot().attrib['line-rate']) * 100)")
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 90.0" | bc -l) )); then
            echo "Test coverage ($COVERAGE%) is below the required threshold (90%)"
            exit 1
          fi


      # 12. Generate GitHub Actions Summary
      - name: üìÑ Add Test Report Summary
        if: always()
        run: |
          echo "## üìä Test Report Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Unit Tests Passed:** $(pytest --count)" >> $GITHUB_STEP_SUMMARY
          echo "- üìà **Coverage:** $(python -c 'import xml.etree.ElementTree as ET; print(float(ET.parse("coverage.xml").getroot().attrib["line-rate"])*100)')%" >> $GITHUB_STEP_SUMMARY
          echo "- üìù **Detailed reports available on GitHub Pages and as artifacts.**" >> $GITHUB_STEP_SUMMARY

      # 13. Publish Reports to GitHub Pages
#      - name: üì¢ Publish Reports to GitHub Pages
#        if: always()
#        uses: peaceiris/actions-gh-pages@v3
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          publish_dir: ./test-results
#          destination_dir: test-results

      # 14. Final Status Notification
      - name: üì¨ Notify CI Status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ CI Pipeline completed successfully!"
          else
            echo "‚ùå CI Pipeline encountered errors!"
          fi
