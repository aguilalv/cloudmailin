---
name: CI Pipeline
on:
  push:
    branches:
      - master
      - staging
  pull_request:
    branches:
      - master
      - staging

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - 3.12.8
    steps:

      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run black
        run: black . --check
      
      - name: Run flake8
        run: flake8 .
      
      - name: Run unit tests with coverage
        run: |
          pytest --cov=cloudmailin --cov-report=xml:reports/coverage.xml \
                 --cov-report=html:reports/coverage \
                 --junitxml=reports/unit-tests.xml \
                 --alluredir=reports/allure-results \
                 --ignore=tests/functional
      
        # D. Install Allure CLI
      - name: Install Allure CLI
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
          tar -zxvf allure-2.24.0.tgz
          sudo mv allure-2.24.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure
          allure --version
      
      - name: Generate Allure Report
        if: always()
        run: >
          allure generate reports/allure-results -o reports/allure-unit-report
          --clean
      
      - name: Check coverage thresholds
        run: >
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET;print(float(ET.parse('reports/coverage.xml').getroot().attrib['line-rate'])* 100)")
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 90.0" | bc -l) )); then
            echo "Test coverage ($COVERAGE%) is below the required threshold (90%)"
            exit 1
          fi
      
      - name: üìÑ Add Test Report Summary
        if: always()
        run: >
          echo "## üìä Test Report Summary" >> $GITHUB_STEP_SUMMARY
          # Count Unit Tests
          UNIT_TEST_COUNT=$(pytest --collect-only --ignore=tests/functional | grep 'collected' | awk '{print $2}')
          echo "- ‚úÖ **Unit Tests Passed:** $UNIT_TEST_COUNT" >> $GITHUB_STEP_SUMMARY

          # Coverage Percentage
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; print(f'{float(ET.parse(\"reports/coverage.xml\").getroot().attrib[\"line-rate\"])*100:.2f}')")
          echo "- üìà **Coverage:** $COVERAGE%" >> $GITHUB_STEP_SUMMARY

          # Links to Reports
          print(f'{float(ET.parse(\"reports/coverage.xml\").getroot().attrib[\"line-rate\"])*100:.2f}')")%" >> $GITHUB_STEP_SUMMARY
          echo "- üìù **[View Unit Tests Allure Report](https://<username>.github.io/<repo>/reports-output/${{ github.ref_name }}/allure-unit-report/index.html)**" >> $GITHUB_STEP_SUMMARY
          echo "- üìù **[View Unit Tests Allure Report](https://<username>.github.io/<repo>/reports-output/${{ github.ref_name }}/coverage/index.html)**" >> $GITHUB_STEP_SUMMARY


      - name: Pull latest gh-pages branch
        if: always()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch origin gh-pages
          git checkout gh-pages
          git pull origin gh-pages

      - name: Prepare GitHub Pages Reports
        if: always()
        run: |
          mkdir -p reports-output/${{ github.ref_name }}/allure-unit-report
          cp -r reports/allure-unit-report/* reports-output/${{ github.ref_name }}/allure-unit-report/
          mkdir -p reports-output/${{ github.ref_name }}/coverage
          cp -r reports/coverage/* reports-output/${{ github.ref_name }}/coverage/

        # 10.5 Push new reports to github pages
      - name: Commit and Push to GitHub Pages
        if: always()
        run: |
          git add reports-output/*
          git commit -m "Update GitHub Pages reports [${{ github.ref_name }}]" || echo "No changes to commit"
          git push origin gh-pages
      
      - name: üì¨ Notify CI Status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ CI Pipeline completed successfully!"
          else
            echo "‚ùå CI Pipeline encountered errors!"
          fi

